
"use client";
import type { FC, ReactNode } from 'react';
import { useState, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { generateReadingPassage, type GenerateReadingPassageInput } from '@/ai/flows/generate-reading-passage';
import { Loader2, BookMarked, RefreshCcw } from 'lucide-react';
import { useToast } from "@/hooks/use-toast";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

interface ReadingPracticeProps {
  wordsToPractice: string[];
  readingLevel: string;
}

const highlightWords = (text: string, words: string[]): ReactNode[] => {
  if (!words.length || !text) return [text];
  // Ensure words are sorted by length descending to match longer phrases first if applicable
  // and escape special characters for regex.
  const sortedWords = [...words].sort((a, b) => b.length - a.length);
  const regex = new RegExp(`\\b(${sortedWords.map(word => word.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&')).join('|')})\\b`, 'gi');
  
  const parts: ReactNode[] = [];
  let lastIndex = 0;

  text.replace(regex, (match, ...args) => {
    const offset = args[args.length - 2]; // The offset of the match
    // Add the text before the match
    if (offset > lastIndex) {
      parts.push(text.substring(lastIndex, offset));
    }
    // Add the highlighted match
    parts.push(
      <strong key={`match-${offset}`} className="text-primary font-bold underline decoration-wavy decoration-primary/50 underline-offset-2">
        {match}
      </strong>
    );
    lastIndex = offset + match.length;
    return match; // Required by String.prototype.replace
  });

  // Add any remaining text after the last match
  if (lastIndex < text.length) {
    parts.push(text.substring(lastIndex));
  }
  
  return parts.length > 0 ? parts : [text]; // Return original text if no parts (e.g. no matches)
};


export const ReadingPractice: FC<ReadingPracticeProps> = ({ wordsToPractice, readingLevel }) => {
  const [passage, setPassage] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const { toast } = useToast();

  const fetchPassage = useCallback(async () => {
    if (wordsToPractice.length === 0) {
      toast({
        title: "No Words to Practice",
        description: "Please get some word suggestions and select a word first.",
        variant: "default",
      });
      setPassage("Please get some word suggestions and select a word first. Then, try generating a passage.");
      return;
    }

    setIsLoading(true);
    setPassage(null);
    try {
      const input: GenerateReadingPassageInput = { words: wordsToPractice, readingLevel };
      const result = await generateReadingPassage(input);
      if (result.passage) {
        setPassage(result.passage);
        toast({ title: "Passage Generated!", description: "Happy reading!" });
      } else {
        setPassage("Could not generate a passage with the current words and settings. Try again or change words.");
        toast({ title: "No Passage Generated", description: "Try different words or settings.", variant: "default" });
      }
    } catch (error) {
      console.error("Error generating passage:", error);
      setPassage("An error occurred while generating the passage. Please try again.");
      toast({ title: "Generation Error", description: "Could not generate a passage at this time.", variant: "destructive" });
    } finally {
      setIsLoading(false);
    }
  }, [wordsToPractice, readingLevel, toast]);

  return (
    <Card className="shadow-lg w-full">
      <CardHeader>
        <CardTitle className="flex items-center text-xl font-semibold text-primary">
          <BookMarked className="mr-2 h-5 w-5" /> Practice Reading
        </CardTitle>
        <CardDescription>
          Read a short passage generated by AI using some of your practice words.
        </CardDescription>
      </CardHeader>
      <CardContent className="space-y-4">
        <Button onClick={fetchPassage} disabled={isLoading || wordsToPractice.length === 0} className="w-full" size="lg">
          {isLoading ? (
            <>
              <Loader2 className="mr-2 h-4 w-4 animate-spin" />
              Generating Passage...
            </>
          ) : (
            <>
              <RefreshCcw className="mr-2 h-4 w-4" />
              Generate New Passage
            </>
          )}
        </Button>
        {isLoading && (
          <div className="flex justify-center items-center p-4">
            <Loader2 className="h-8 w-8 animate-spin text-primary" />
          </div>
        )}
        {passage && !isLoading && (
          <Alert variant="default" className="bg-card/50 dark:bg-card/30 border-primary/30">
             <AlertTitle className="text-lg font-semibold text-primary">Your Reading Passage:</AlertTitle>
            <AlertDescription className="text-base leading-relaxed text-foreground/90 dark:text-foreground/80 py-2">
              {highlightWords(passage, wordsToPractice).map((part, index) => (
                <span key={index}>{part}</span>
              ))}
            </AlertDescription>
          </Alert>
        )}
        {!passage && !isLoading && wordsToPractice.length === 0 && (
           <Alert variant="default">
             <AlertTitle>Ready to Read?</AlertTitle>
             <AlertDescription>
               First, get some word suggestions from the "AI Word Suggestions" panel and select a word. Once you have words in your practice list, you can generate a reading passage here.
             </AlertDescription>
           </Alert>
        )}
         {!passage && !isLoading && wordsToPractice.length > 0 && (
           <Alert variant="default">
             <AlertTitle>Generate a Passage</AlertTitle>
             <AlertDescription>
               Click the "Generate New Passage" button above to create a story with your practice words!
             </AlertDescription>
           </Alert>
        )}
      </CardContent>
      {passage && !isLoading && (
        <CardFooter>
            <p className="text-xs text-muted-foreground">Passage generated by AI. Words from your list are <strong className="text-primary">highlighted</strong>.</p>
        </CardFooter>
      )}
    </Card>
  );
};
